length(NULL)
download_set <- function(set, sets_dir = ".", images = FALSE) {
# download cards
cards <- list()
next_page_url <- sprintf("https://api.scryfall.com/cards/search?q=set:%s", set)
while(TRUE) {
result <- jsonlite::fromJSON(next_page_url, simplifyVector = FALSE)
cards <- append(cards, result$data)
if (result$has_more)
next_page_url <- result$next_page
else
break
}
# narrow to the fields we care about
cards <- lapply(cards, function(card) {
# get image uri
if (!is.null(card$image_uris)) {
image_uri <- card$image_uris$png
} else if (!is.null(card$card_faces)) {
image_uri <- card$card_faces[[1]]$image_uris$png
} else {
str(card)
stop("Unable to find image_uri for card")
}
list(
id = card$id,
name = card$name,
image_uri = image_uri,
type_line = card$type_line,
mana_cost = card$mana_cost,
cmc = card$cmc,
colors = I(card$color_identity),
rarity = card$rarity
)
})
# write as json
set_dir <- file.path(sets_dir, set)
dir.create(set_dir, showWarnings = FALSE, recursive = TRUE)
set_json <- file.path(set_dir, "cards.json")
jsonlite::write_json(cards, set_json, auto_unbox = TRUE)
# download images
if (images) {
for (card in cards) {
card_image <- file.path(set_dir, paste0(card$id, ".png"))
if (!file.exists(card_image)) {
curl::curl_download(card$image_uri, card_image)
}
}
}
}
download_set("grn", sets_dir = "~/projects/mtgdrafter/public/sets", images = TRUE)
download_set("dom", sets_dir = "~/projects/mtgdrafter/public/sets", images = TRUE)
download_set("m19", sets_dir = "~/projects/mtgdrafter/public/sets", images = TRUE)
download_set <- function(set, sets_dir = ".", images = FALSE) {
# download cards
cards <- list()
next_page_url <- sprintf("https://api.scryfall.com/cards/search?q=set:%s", set)
while(TRUE) {
result <- jsonlite::fromJSON(next_page_url, simplifyVector = FALSE)
cards <- append(cards, result$data)
if (result$has_more)
next_page_url <- result$next_page
else
break
}
# narrow to the fields we care about
cards <- lapply(cards, function(card) {
# get image uri
if (!is.null(card$image_uris)) {
image_uri <- card$image_uris$png
} else if (!is.null(card$card_faces)) {
image_uri <- card$card_faces[[1]]$image_uris$png
} else {
str(card)
stop("Unable to find image_uri for card")
}
# get mana_cost
if (!is.null(card$mana_cost)) {
mana_cost <- card$mana_cost
} else if (!is.null(card$card_faces)) {
mana_cost <- card$card_faces[[1]]$mana_cost
} else {
str(card)
stop("Unable to find mana_cost for card")
}
list(
id = card$id,
name = card$name,
image_uri = image_uri,
type_line = card$type_line,
mana_cost = mana_cost,
cmc = card$cmc,
colors = I(card$color_identity),
rarity = card$rarity
)
})
# write as json
set_dir <- file.path(sets_dir, set)
dir.create(set_dir, showWarnings = FALSE, recursive = TRUE)
set_json <- file.path(set_dir, "cards.json")
jsonlite::write_json(cards, set_json, auto_unbox = TRUE)
# download images
if (images) {
for (card in cards) {
card_image <- file.path(set_dir, paste0(card$id, ".png"))
if (!file.exists(card_image)) {
curl::curl_download(card$image_uri, card_image)
}
}
}
}
download_set("grn", sets_dir = "~/projects/mtgdrafter/public/sets", images = TRUE)
devtools::install_github("rstudio/radix")
download_set("grn", sets_dir = "~/projects/mtgdrafter/public/sets", images = FALSE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
source('~/projects/mtgdrafter/tools/download_set.R', echo=TRUE)
library(rvest)
html <- read_html("https://www.mtgranks.com/set/guilds-of-ravnica/")
cards_html <- html %>%
html_nodes("#set_container .col-2 .hidden_card")
cards <- lapply(cards_html, function(card_html) {
card_text <- html_text(card_html, trim = TRUE)
fields <- strsplit(card_text, "\\n")[[1]]
fields <- lapply(fields, trimws)
fields <- fields[nzchar(fields)]
card <- list(
rating = fields[[1]],
name = fields[[2]],
comment = ""
)
if (length(fields) > 2)
card$comment = fields[[3]]
card
})
as.data.frame(do.call(rbind, card))
as.data.frame(do.call(rbind, cards))
cards <- as.data.frame(do.call(rbind, cards))
View(cards)
strsplit(cards[[9]]$rating, "[\\s/]+")[[1]]
strsplit(cards[9,]$rating, "[\\s/]+")[[1]]
cards[9, ]$rating
cards[9, ]
cards[9,"rating"]
str(cards)
str(head(cards))
cards[9, ]$rating
cards[9, ]$rating[[1]]
strsplit(cards[9, ]$rating[[1]], "[ /]+")[[1]]
strsplit(cards[6, ]$rating[[1]], "[ /]+")[[1]]
html <- read_html("https://www.mtgranks.com/set/guilds-of-ravnica/")
cards_html <- html %>%
html_nodes("#set_container .col-2 .hidden_card")
cards <- lapply(cards_html, function(card_html) {
card_text <- html_text(card_html, trim = TRUE)
fields <- strsplit(card_text, "\\n")[[1]]
fields <- lapply(fields, trimws)
fields <- fields[nzchar(fields)]
card <- list(
rating = strsplit(fields[[1]], "[ /]+")[[1]],
name = fields[[2]],
comment = ""
)
if (length(fields) > 2)
card$comment = fields[[3]]
card
})
cards <- as.data.frame(do.call(rbind, cards))
View(cards)
cards <- lapply(cards_html, function(card_html) {
card_text <- html_text(card_html, trim = TRUE)
fields <- strsplit(card_text, "\\n")[[1]]
fields <- lapply(fields, trimws)
fields <- fields[nzchar(fields)]
card <- list(
rating = strsplit(fields[[1]], "[ /]+")[[1]][[1]],
name = fields[[2]],
comment = ""
)
if (length(fields) > 2)
card$comment = fields[[3]]
card
})
cards <- as.data.frame(do.call(rbind, cards))
View(cards)
library(rvest)
html <- read_html("https://www.mtgranks.com/set/guilds-of-ravnica/")
cards_html <- html %>%
html_nodes("#set_container .col-2 .hidden_card")
cards <- lapply(cards_html, function(card_html) {
card_text <- html_text(card_html, trim = TRUE)
fields <- strsplit(card_text, "\\n")[[1]]
fields <- lapply(fields, trimws)
fields <- fields[nzchar(fields)]
card <- list(
rating = as.numeric(strsplit(fields[[1]], "[ /]+")[[1]][[1]]),
name = fields[[2]],
comment = ""
)
if (length(fields) > 2)
card$comment = fields[[3]]
card
})
cards <- as.data.frame(do.call(rbind, cards))
View(cards)
source('~/projects/draftpod/tools/download_ratings.R', echo=TRUE)
View(set_ratings("m19"))
source('~/projects/draftpod/tools/download_ratings.R', echo=TRUE)
View(set_ratings("m19"))
View(set_ratings("dom"))
source('~/projects/draftpod/tools/download_ratings.R', echo=TRUE)
View(set_ratings("m19"))
source('~/projects/draftpod/tools/download_ratings.R', echo=TRUE)
source('~/projects/draftpod/tools/download_ratings.R', echo=TRUE)
source('~/projects/draftpod/tools/download_ratings.R', echo=TRUE)
source('~/projects/draftpod/tools/download_ratings.R', echo=TRUE)
source('~/projects/draftpod/tools/download_ratings.R', echo=TRUE)
source('~/projects/draftpod/tools/download_ratings.R', echo=TRUE)
source("tools/download_ratings.R")
debugSource('~/projects/draftpod/tools/download_set.R', echo=TRUE)
source('~/projects/draftpod/tools/download_set.R', echo=TRUE)
View(set_ratings("m19"))
m19 <- set_ratings("m19")
hist(m19$rating)
str(head(m19))
hist(m19)
class(m19$rating)
hist(as.numeric(m19$rating))
hist(as.numeric(m19$rating), title = "m19")
hist(as.numeric(m19$rating), main = "m19")
knitr::opts_chunk$set(echo = TRUE)
source("download_ratings.R")
all_ratings <- c(
as.numeric(set_ratings("dom")$rating),
as.numeric(set_ratings("m19")$rating),
as.numeric(set_ratings("grn")$rating)
)
hist(all_ratings, main = "All")
source('~/projects/draftpod/tools/download_ratings.R', echo=TRUE)
all_ratings <- c(
as.numeric(set_ratings("dom")$rating),
as.numeric(set_ratings("m19")$rating),
as.numeric(set_ratings("grn")$rating),
as.numeric(set_ratings("rix")$rating),
as.numeric(set_ratings("xln")$rating)
)
hist(all_ratings, main = "All")
summary(all_ratings)
unique(all_ratings)
table(all_ratings)
prop.table(table(all_ratings))
all_ratings <- c(
as.numeric(set_ratings("dom")$rating),
as.numeric(set_ratings("m19")$rating),
as.numeric(set_ratings("grn")$rating),
as.numeric(set_ratings("rix")$rating),
as.numeric(set_ratings("xln")$rating)
)
freq <- table(all_ratings)
pct <- prop.table(freq)
row.names(freq)
rating_dist <- data.frame(
rating = row.names(freq),
freq = freq,
pct = pct
)
View(rating_dist)
freq
rating_dist <- data.frame(
rating = row.names(freq),
freq = as.numeric(freq),
pct = as.numeric(pct)
)
View(rating_dist)
rating_dist <- data.frame(
rating = row.names(freq),
freq = as.numeric(freq),
pct = as.numeric(pct) * 100
)
View(rating_dist)
rating_dist <- data.frame(
rating = row.names(freq),
freq = as.numeric(freq),
pct = round(as.numeric(pct) * 100, digits = 2)
)
debugSource('~/projects/draftpod/tools/download_set.R', echo=TRUE)
set_code <- "grn"
set_url <- sprintf("http://www.draftaholicsanonymous.com/p1p1-%s/",
set_path(set_code))
set_path <- function(set_code) {
switch(set_code,
grn = "guilds-of-ravnica",
m19 = "core-set-2019",
dom = "dominaria",
rix = "rivals-of-ixalan",
xln = "ixalan"
)
}
set_url <- sprintf("http://www.draftaholicsanonymous.com/p1p1-%s/",
set_path(set_code))
set_html <- read_html(set_url)
